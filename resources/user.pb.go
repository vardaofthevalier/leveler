// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

package resources

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type User struct {
	Email       string           `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Credentials *UserCredentials `protobuf:"bytes,2,opt,name=credentials" json:"credentials,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetCredentials() *UserCredentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

type UserCredentials struct {
	Stuff string `protobuf:"bytes,1,opt,name=stuff" json:"stuff,omitempty"`
}

func (m *UserCredentials) Reset()                    { *m = UserCredentials{} }
func (m *UserCredentials) String() string            { return proto.CompactTextString(m) }
func (*UserCredentials) ProtoMessage()               {}
func (*UserCredentials) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *UserCredentials) GetStuff() string {
	if m != nil {
		return m.Stuff
	}
	return ""
}

func init() {
	proto.RegisterType((*User)(nil), "resources.User")
	proto.RegisterType((*UserCredentials)(nil), "resources.UserCredentials")
}

func init() { proto.RegisterFile("user.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 130 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x2d, 0x4e, 0x2d,
	0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2c, 0x4a, 0x2d, 0xce, 0x2f, 0x2d, 0x4a, 0x4e,
	0x2d, 0x56, 0x8a, 0xe2, 0x62, 0x09, 0x2d, 0x4e, 0x2d, 0x12, 0x12, 0xe1, 0x62, 0x4d, 0xcd, 0x4d,
	0xcc, 0xcc, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x70, 0x84, 0x6c, 0xb8, 0xb8, 0x93,
	0x8b, 0x52, 0x53, 0x52, 0xf3, 0x4a, 0x32, 0x13, 0x73, 0x8a, 0x25, 0x98, 0x14, 0x18, 0x35, 0xb8,
	0x8d, 0xa4, 0xf4, 0xe0, 0xda, 0xf5, 0x40, 0x7a, 0x9d, 0x11, 0x2a, 0x82, 0x90, 0x95, 0x2b, 0xa9,
	0x73, 0xf1, 0xa3, 0xc9, 0x83, 0xac, 0x29, 0x2e, 0x29, 0x4d, 0x4b, 0x83, 0x59, 0x03, 0xe6, 0x24,
	0xb1, 0x81, 0x9d, 0x65, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x19, 0xb7, 0x21, 0xd2, 0xa4, 0x00,
	0x00, 0x00,
}
