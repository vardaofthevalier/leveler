// Code generated by protoc-gen-go. DO NOT EDIT.
// source: role.proto

package leveler

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RoleId struct {
	Id string `protobuf:"bytes,1,opt,name=Id" json:"Id,omitempty"`
}

func (m *RoleId) Reset()                    { *m = RoleId{} }
func (m *RoleId) String() string            { return proto.CompactTextString(m) }
func (*RoleId) ProtoMessage()               {}
func (*RoleId) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *RoleId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Role struct {
	Id           string         `protobuf:"bytes,1,opt,name=Id" json:"Id,omitempty"`
	Name         string         `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Description  string         `protobuf:"bytes,3,opt,name=Description" json:"Description,omitempty"`
	Requirements []*Requirement `protobuf:"bytes,4,rep,name=Requirements" json:"Requirements,omitempty"`
}

func (m *Role) Reset()                    { *m = Role{} }
func (m *Role) String() string            { return proto.CompactTextString(m) }
func (*Role) ProtoMessage()               {}
func (*Role) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *Role) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Role) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Role) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Role) GetRequirements() []*Requirement {
	if m != nil {
		return m.Requirements
	}
	return nil
}

type RoleList struct {
	Results []*Role `protobuf:"bytes,1,rep,name=Results" json:"Results,omitempty"`
}

func (m *RoleList) Reset()                    { *m = RoleList{} }
func (m *RoleList) String() string            { return proto.CompactTextString(m) }
func (*RoleList) ProtoMessage()               {}
func (*RoleList) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *RoleList) GetResults() []*Role {
	if m != nil {
		return m.Results
	}
	return nil
}

func init() {
	proto.RegisterType((*RoleId)(nil), "leveler.RoleId")
	proto.RegisterType((*Role)(nil), "leveler.Role")
	proto.RegisterType((*RoleList)(nil), "leveler.RoleList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RoleEndpoint service

type RoleEndpointClient interface {
	GetRole(ctx context.Context, in *RoleId, opts ...grpc.CallOption) (*Role, error)
	ListRoles(ctx context.Context, in *Query, opts ...grpc.CallOption) (*RoleList, error)
	CreateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*RoleId, error)
	UpdateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error)
	DeleteRole(ctx context.Context, in *RoleId, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type roleEndpointClient struct {
	cc *grpc.ClientConn
}

func NewRoleEndpointClient(cc *grpc.ClientConn) RoleEndpointClient {
	return &roleEndpointClient{cc}
}

func (c *roleEndpointClient) GetRole(ctx context.Context, in *RoleId, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := grpc.Invoke(ctx, "/leveler.RoleEndpoint/GetRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleEndpointClient) ListRoles(ctx context.Context, in *Query, opts ...grpc.CallOption) (*RoleList, error) {
	out := new(RoleList)
	err := grpc.Invoke(ctx, "/leveler.RoleEndpoint/ListRoles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleEndpointClient) CreateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*RoleId, error) {
	out := new(RoleId)
	err := grpc.Invoke(ctx, "/leveler.RoleEndpoint/CreateRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleEndpointClient) UpdateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := grpc.Invoke(ctx, "/leveler.RoleEndpoint/UpdateRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleEndpointClient) DeleteRole(ctx context.Context, in *RoleId, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/leveler.RoleEndpoint/DeleteRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RoleEndpoint service

type RoleEndpointServer interface {
	GetRole(context.Context, *RoleId) (*Role, error)
	ListRoles(context.Context, *Query) (*RoleList, error)
	CreateRole(context.Context, *Role) (*RoleId, error)
	UpdateRole(context.Context, *Role) (*Role, error)
	DeleteRole(context.Context, *RoleId) (*google_protobuf.Empty, error)
}

func RegisterRoleEndpointServer(s *grpc.Server, srv RoleEndpointServer) {
	s.RegisterService(&_RoleEndpoint_serviceDesc, srv)
}

func _RoleEndpoint_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleEndpointServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leveler.RoleEndpoint/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleEndpointServer).GetRole(ctx, req.(*RoleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleEndpoint_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleEndpointServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leveler.RoleEndpoint/ListRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleEndpointServer).ListRoles(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleEndpoint_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleEndpointServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leveler.RoleEndpoint/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleEndpointServer).CreateRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleEndpoint_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleEndpointServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leveler.RoleEndpoint/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleEndpointServer).UpdateRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleEndpoint_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleEndpointServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leveler.RoleEndpoint/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleEndpointServer).DeleteRole(ctx, req.(*RoleId))
	}
	return interceptor(ctx, in, info, handler)
}

var _RoleEndpoint_serviceDesc = grpc.ServiceDesc{
	ServiceName: "leveler.RoleEndpoint",
	HandlerType: (*RoleEndpointServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRole",
			Handler:    _RoleEndpoint_GetRole_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _RoleEndpoint_ListRoles_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _RoleEndpoint_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _RoleEndpoint_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _RoleEndpoint_DeleteRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "role.proto",
}

func init() { proto.RegisterFile("role.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 319 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x51, 0x6b, 0xfa, 0x30,
	0x14, 0xc5, 0xdb, 0x2a, 0xfa, 0xf7, 0xea, 0xdf, 0xe1, 0x65, 0x8c, 0xd2, 0xbd, 0x48, 0x5e, 0x26,
	0x6c, 0xc4, 0xa1, 0x0f, 0xdb, 0xfb, 0x94, 0x51, 0x18, 0x83, 0x15, 0xf6, 0x01, 0x74, 0xbd, 0x93,
	0x42, 0x6c, 0xba, 0x24, 0x1d, 0xf8, 0x3e, 0xf6, 0xb9, 0x47, 0x62, 0x9d, 0x56, 0xd9, 0x5b, 0x72,
	0x7e, 0x27, 0xe7, 0x9e, 0x70, 0x01, 0x94, 0x14, 0xc4, 0x0b, 0x25, 0x8d, 0xc4, 0xb6, 0xa0, 0x4f,
	0x12, 0xa4, 0xa2, 0x81, 0xa2, 0x8f, 0x32, 0x53, 0xb4, 0xa6, 0xdc, 0x6c, 0x59, 0x04, 0xa5, 0xc9,
	0x44, 0x75, 0xbe, 0x5c, 0x49, 0xb9, 0x12, 0x34, 0x76, 0xb7, 0x65, 0xf9, 0x3e, 0xa6, 0x75, 0x61,
	0x36, 0x5b, 0xc8, 0x42, 0x68, 0x25, 0x52, 0x50, 0x9c, 0x62, 0x1f, 0x82, 0x38, 0x0d, 0xfd, 0xa1,
	0x3f, 0xea, 0x24, 0x41, 0x9c, 0xb2, 0x6f, 0x1f, 0x9a, 0x16, 0x1d, 0x03, 0x44, 0x68, 0x3e, 0x2f,
	0xd6, 0x14, 0x06, 0x4e, 0x71, 0x67, 0x1c, 0x42, 0x77, 0x46, 0xfa, 0x4d, 0x65, 0x85, 0xc9, 0x64,
	0x1e, 0x36, 0x1c, 0x3a, 0x94, 0xf0, 0x1e, 0x7a, 0xc9, 0xbe, 0xa6, 0x0e, 0x9b, 0xc3, 0xc6, 0xa8,
	0x3b, 0x39, 0xe7, 0xd5, 0x27, 0xf8, 0x01, 0x4c, 0x6a, 0x4e, 0x36, 0x85, 0x7f, 0xb6, 0xc7, 0x53,
	0xa6, 0x0d, 0x5e, 0x41, 0x3b, 0x21, 0x5d, 0x0a, 0xa3, 0x43, 0xdf, 0x05, 0xfc, 0xdf, 0x07, 0x48,
	0x41, 0xc9, 0x8e, 0x4e, 0xbe, 0x02, 0xe8, 0x59, 0x65, 0x9e, 0xa7, 0x85, 0xcc, 0x72, 0x83, 0xd7,
	0xd0, 0x7e, 0x24, 0xe3, 0x3e, 0x74, 0x56, 0x7b, 0x13, 0xa7, 0x51, 0x3d, 0x84, 0x79, 0x78, 0x0b,
	0x1d, 0x3b, 0xce, 0xde, 0x34, 0xf6, 0x7f, 0xe9, 0x4b, 0x49, 0x6a, 0x13, 0x0d, 0x6a, 0x6e, 0xeb,
	0x63, 0x1e, 0x72, 0x80, 0x07, 0x45, 0x0b, 0x43, 0x6e, 0x42, 0x3d, 0x30, 0x3a, 0x1e, 0xc8, 0x3c,
	0xbc, 0x01, 0x78, 0x2d, 0xd2, 0x3f, 0xfc, 0x27, 0x7d, 0xee, 0x00, 0x66, 0x24, 0xa8, 0x72, 0x9f,
	0xf4, 0xbf, 0xe0, 0xdb, 0x15, 0xf3, 0xdd, 0x8a, 0xf9, 0xdc, 0xae, 0x98, 0x79, 0xcb, 0x96, 0x53,
	0xa6, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x40, 0x78, 0x2b, 0x55, 0x38, 0x02, 0x00, 0x00,
}
