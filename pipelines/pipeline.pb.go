// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pipeline.proto

/*
Package pipelines is a generated protocol buffer package.

It is generated from these files:
	pipeline.proto
	integration.proto
	data.proto

It has these top-level messages:
	PipelineInput
	PipelineOutput
	PipelineStep
	BasicPipeline
	Integration
	IntegrationsList
	BitbucketAccessConfig
	GithubAccessConfig
	AWSConfig
	NexusConfig
	SlackConfig
*/
package pipelines

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PipelineInput struct {
	From        string `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	Integration string `protobuf:"bytes,2,opt,name=integration" json:"integration,omitempty"`
}

func (m *PipelineInput) Reset()                    { *m = PipelineInput{} }
func (m *PipelineInput) String() string            { return proto.CompactTextString(m) }
func (*PipelineInput) ProtoMessage()               {}
func (*PipelineInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PipelineInput) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *PipelineInput) GetIntegration() string {
	if m != nil {
		return m.Integration
	}
	return ""
}

type PipelineOutput struct {
	To          string `protobuf:"bytes,1,opt,name=to" json:"to,omitempty"`
	From        string `protobuf:"bytes,2,opt,name=from" json:"from,omitempty"`
	Integration string `protobuf:"bytes,3,opt,name=integration" json:"integration,omitempty"`
}

func (m *PipelineOutput) Reset()                    { *m = PipelineOutput{} }
func (m *PipelineOutput) String() string            { return proto.CompactTextString(m) }
func (*PipelineOutput) ProtoMessage()               {}
func (*PipelineOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PipelineOutput) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *PipelineOutput) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *PipelineOutput) GetIntegration() string {
	if m != nil {
		return m.Integration
	}
	return ""
}

type PipelineStep struct {
	Workdir   string   `protobuf:"bytes,1,opt,name=workdir" json:"workdir,omitempty"`
	Command   string   `protobuf:"bytes,2,opt,name=command" json:"command,omitempty"`
	Image     string   `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
	Inputs    []string `protobuf:"bytes,4,rep,name=inputs" json:"inputs,omitempty"`
	Outputs   []string `protobuf:"bytes,5,rep,name=outputs" json:"outputs,omitempty"`
	Timeout   int32    `protobuf:"varint,6,opt,name=timeout" json:"timeout,omitempty"`
	Skip      bool     `protobuf:"varint,7,opt,name=skip" json:"skip,omitempty"`
	DependsOn []string `protobuf:"bytes,8,rep,name=dependsOn" json:"dependsOn,omitempty"`
}

func (m *PipelineStep) Reset()                    { *m = PipelineStep{} }
func (m *PipelineStep) String() string            { return proto.CompactTextString(m) }
func (*PipelineStep) ProtoMessage()               {}
func (*PipelineStep) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PipelineStep) GetWorkdir() string {
	if m != nil {
		return m.Workdir
	}
	return ""
}

func (m *PipelineStep) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *PipelineStep) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *PipelineStep) GetInputs() []string {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *PipelineStep) GetOutputs() []string {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *PipelineStep) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *PipelineStep) GetSkip() bool {
	if m != nil {
		return m.Skip
	}
	return false
}

func (m *PipelineStep) GetDependsOn() []string {
	if m != nil {
		return m.DependsOn
	}
	return nil
}

type BasicPipeline struct {
	Inputs  map[string]*PipelineInput  `protobuf:"bytes,1,rep,name=inputs" json:"inputs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Outputs map[string]*PipelineOutput `protobuf:"bytes,2,rep,name=outputs" json:"outputs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Steps   map[string]*PipelineStep   `protobuf:"bytes,3,rep,name=steps" json:"steps,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *BasicPipeline) Reset()                    { *m = BasicPipeline{} }
func (m *BasicPipeline) String() string            { return proto.CompactTextString(m) }
func (*BasicPipeline) ProtoMessage()               {}
func (*BasicPipeline) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BasicPipeline) GetInputs() map[string]*PipelineInput {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *BasicPipeline) GetOutputs() map[string]*PipelineOutput {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *BasicPipeline) GetSteps() map[string]*PipelineStep {
	if m != nil {
		return m.Steps
	}
	return nil
}

func init() {
	proto.RegisterType((*PipelineInput)(nil), "pipelines.PipelineInput")
	proto.RegisterType((*PipelineOutput)(nil), "pipelines.PipelineOutput")
	proto.RegisterType((*PipelineStep)(nil), "pipelines.PipelineStep")
	proto.RegisterType((*BasicPipeline)(nil), "pipelines.BasicPipeline")
}

func init() { proto.RegisterFile("pipeline.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 407 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0xd1, 0xea, 0xd3, 0x30,
	0x14, 0xc6, 0x69, 0xfb, 0xef, 0xfe, 0xeb, 0xe9, 0x36, 0x34, 0x88, 0xc6, 0xe2, 0x45, 0x99, 0x0a,
	0xbd, 0xb1, 0xc2, 0xbc, 0x51, 0x11, 0x04, 0x61, 0x17, 0x5e, 0x4d, 0x3b, 0xf4, 0xbe, 0xae, 0x71,
	0x84, 0xad, 0x49, 0x68, 0x52, 0x65, 0x6f, 0xe8, 0x13, 0xf8, 0x3c, 0x92, 0x34, 0xe9, 0x5a, 0xec,
	0xee, 0xf2, 0x9d, 0x93, 0xef, 0x97, 0x73, 0xf8, 0x5a, 0x58, 0x09, 0x2a, 0xc8, 0x99, 0x32, 0x92,
	0x8b, 0x86, 0x2b, 0x8e, 0x22, 0xa7, 0x65, 0x02, 0x55, 0xa9, 0xca, 0xae, 0x9c, 0x3c, 0xa4, 0x4c,
	0x91, 0x63, 0x53, 0x2a, 0xca, 0x59, 0x57, 0x5a, 0x6f, 0x61, 0xf9, 0xc5, 0xde, 0xfd, 0xcc, 0x44,
	0xab, 0x10, 0x82, 0xbb, 0x9f, 0x0d, 0xaf, 0xb1, 0x97, 0x7a, 0x59, 0x54, 0x98, 0x33, 0x4a, 0x21,
	0x1e, 0x38, 0xb1, 0x6f, 0x5a, 0xc3, 0xd2, 0xfa, 0x3b, 0xac, 0x1c, 0x66, 0xd7, 0x2a, 0xcd, 0x59,
	0x81, 0xaf, 0xb8, 0xa5, 0xf8, 0x8a, 0xf7, 0x5c, 0xff, 0x36, 0x37, 0xf8, 0x9f, 0xfb, 0xd7, 0x83,
	0x85, 0x03, 0xef, 0x15, 0x11, 0x08, 0xc3, 0xfd, 0x6f, 0xde, 0x9c, 0x2a, 0xda, 0x58, 0xb6, 0x93,
	0xba, 0x73, 0xe0, 0x75, 0x5d, 0xb2, 0xca, 0xbe, 0xe1, 0x24, 0x7a, 0x04, 0x21, 0xad, 0xcb, 0x23,
	0xb1, 0x0f, 0x74, 0x02, 0x3d, 0x86, 0x19, 0xd5, 0x1b, 0x4b, 0x7c, 0x97, 0x06, 0x59, 0x54, 0x58,
	0xa5, 0x39, 0xdc, 0xac, 0x20, 0x71, 0x68, 0x1a, 0x4e, 0xea, 0x8e, 0xa2, 0x35, 0xe1, 0xad, 0xc2,
	0xb3, 0xd4, 0xcb, 0xc2, 0xc2, 0x49, 0xbd, 0x9c, 0x3c, 0x51, 0x81, 0xef, 0x53, 0x2f, 0x9b, 0x17,
	0xe6, 0x8c, 0x9e, 0x41, 0x54, 0x11, 0x41, 0x58, 0x25, 0x77, 0x0c, 0xcf, 0x0d, 0xe9, 0x5a, 0x58,
	0xff, 0x09, 0x60, 0xf9, 0xa9, 0x94, 0xf4, 0xe0, 0xb6, 0x43, 0x1f, 0xfa, 0x79, 0xbc, 0x34, 0xc8,
	0xe2, 0xcd, 0x8b, 0xbc, 0x0f, 0x31, 0x1f, 0xdd, 0xcc, 0x4d, 0x50, 0x72, 0xcb, 0x54, 0x73, 0xe9,
	0xa7, 0xfe, 0x78, 0x9d, 0xda, 0x37, 0xf6, 0x97, 0x37, 0xed, 0x5d, 0x40, 0xd6, 0xdf, 0x2f, 0xf7,
	0x0e, 0x42, 0xa9, 0x88, 0x90, 0x38, 0x30, 0xf6, 0xe7, 0x37, 0xed, 0x3a, 0x06, 0x6b, 0xee, 0x1c,
	0xc9, 0x1e, 0xe2, 0xc1, 0x48, 0xe8, 0x01, 0x04, 0x27, 0x72, 0xb1, 0xf1, 0xe8, 0x23, 0xca, 0x21,
	0xfc, 0x55, 0x9e, 0x5b, 0x62, 0x82, 0x89, 0x37, 0x78, 0xc0, 0x1e, 0x7d, 0x7c, 0x45, 0x77, 0xed,
	0xbd, 0xff, 0xd6, 0x4b, 0xbe, 0xc1, 0x62, 0x38, 0xe8, 0x04, 0xf5, 0xf5, 0x98, 0xfa, 0x74, 0x82,
	0xda, 0x11, 0x86, 0xd8, 0xaf, 0x00, 0xd7, 0x05, 0x26, 0xa0, 0xaf, 0xc6, 0xd0, 0x27, 0x13, 0x50,
	0xed, 0x1f, 0x20, 0x7f, 0xcc, 0xcc, 0x9f, 0xf4, 0xe6, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x64,
	0xe8, 0xbf, 0xfb, 0x85, 0x03, 0x00, 0x00,
}
