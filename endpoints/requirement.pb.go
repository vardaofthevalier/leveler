// Code generated by protoc-gen-go. DO NOT EDIT.
// source: requirement.proto

package leveler

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RequirementId struct {
	Name string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
}

func (m *RequirementId) Reset()                    { *m = RequirementId{} }
func (m *RequirementId) String() string            { return proto.CompactTextString(m) }
func (*RequirementId) ProtoMessage()               {}
func (*RequirementId) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *RequirementId) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Requirement struct {
	Name        string            `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Description string            `protobuf:"bytes,2,opt,name=Description" json:"Description,omitempty"`
	Actions     []*Action         `protobuf:"bytes,3,rep,name=Actions" json:"Actions,omitempty"`
	Tests       []*Action         `protobuf:"bytes,4,rep,name=Tests" json:"Tests,omitempty"`
	Constraints []*Constraint     `protobuf:"bytes,5,rep,name=Constraints" json:"Constraints,omitempty"`
	Environment map[string]string `protobuf:"bytes,6,rep,name=Environment" json:"Environment,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Requirement) Reset()                    { *m = Requirement{} }
func (m *Requirement) String() string            { return proto.CompactTextString(m) }
func (*Requirement) ProtoMessage()               {}
func (*Requirement) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *Requirement) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Requirement) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Requirement) GetActions() []*Action {
	if m != nil {
		return m.Actions
	}
	return nil
}

func (m *Requirement) GetTests() []*Action {
	if m != nil {
		return m.Tests
	}
	return nil
}

func (m *Requirement) GetConstraints() []*Constraint {
	if m != nil {
		return m.Constraints
	}
	return nil
}

func (m *Requirement) GetEnvironment() map[string]string {
	if m != nil {
		return m.Environment
	}
	return nil
}

type RequirementList struct {
	Results []*Requirement `protobuf:"bytes,1,rep,name=Results" json:"Results,omitempty"`
}

func (m *RequirementList) Reset()                    { *m = RequirementList{} }
func (m *RequirementList) String() string            { return proto.CompactTextString(m) }
func (*RequirementList) ProtoMessage()               {}
func (*RequirementList) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *RequirementList) GetResults() []*Requirement {
	if m != nil {
		return m.Results
	}
	return nil
}

func init() {
	proto.RegisterType((*RequirementId)(nil), "leveler.RequirementId")
	proto.RegisterType((*Requirement)(nil), "leveler.Requirement")
	proto.RegisterType((*RequirementList)(nil), "leveler.RequirementList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RequirementEndpoint service

type RequirementEndpointClient interface {
	GetRequirement(ctx context.Context, in *RequirementId, opts ...grpc.CallOption) (*Requirement, error)
	ListRequirements(ctx context.Context, in *Query, opts ...grpc.CallOption) (*RequirementList, error)
	CreateRequirement(ctx context.Context, in *Requirement, opts ...grpc.CallOption) (*Requirement, error)
	UpdateRequirement(ctx context.Context, in *Requirement, opts ...grpc.CallOption) (*Requirement, error)
	DeleteRequirement(ctx context.Context, in *RequirementId, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type requirementEndpointClient struct {
	cc *grpc.ClientConn
}

func NewRequirementEndpointClient(cc *grpc.ClientConn) RequirementEndpointClient {
	return &requirementEndpointClient{cc}
}

func (c *requirementEndpointClient) GetRequirement(ctx context.Context, in *RequirementId, opts ...grpc.CallOption) (*Requirement, error) {
	out := new(Requirement)
	err := grpc.Invoke(ctx, "/leveler.RequirementEndpoint/GetRequirement", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requirementEndpointClient) ListRequirements(ctx context.Context, in *Query, opts ...grpc.CallOption) (*RequirementList, error) {
	out := new(RequirementList)
	err := grpc.Invoke(ctx, "/leveler.RequirementEndpoint/ListRequirements", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requirementEndpointClient) CreateRequirement(ctx context.Context, in *Requirement, opts ...grpc.CallOption) (*Requirement, error) {
	out := new(Requirement)
	err := grpc.Invoke(ctx, "/leveler.RequirementEndpoint/CreateRequirement", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requirementEndpointClient) UpdateRequirement(ctx context.Context, in *Requirement, opts ...grpc.CallOption) (*Requirement, error) {
	out := new(Requirement)
	err := grpc.Invoke(ctx, "/leveler.RequirementEndpoint/UpdateRequirement", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requirementEndpointClient) DeleteRequirement(ctx context.Context, in *RequirementId, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/leveler.RequirementEndpoint/DeleteRequirement", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RequirementEndpoint service

type RequirementEndpointServer interface {
	GetRequirement(context.Context, *RequirementId) (*Requirement, error)
	ListRequirements(context.Context, *Query) (*RequirementList, error)
	CreateRequirement(context.Context, *Requirement) (*Requirement, error)
	UpdateRequirement(context.Context, *Requirement) (*Requirement, error)
	DeleteRequirement(context.Context, *RequirementId) (*google_protobuf.Empty, error)
}

func RegisterRequirementEndpointServer(s *grpc.Server, srv RequirementEndpointServer) {
	s.RegisterService(&_RequirementEndpoint_serviceDesc, srv)
}

func _RequirementEndpoint_GetRequirement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequirementId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequirementEndpointServer).GetRequirement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leveler.RequirementEndpoint/GetRequirement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequirementEndpointServer).GetRequirement(ctx, req.(*RequirementId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequirementEndpoint_ListRequirements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequirementEndpointServer).ListRequirements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leveler.RequirementEndpoint/ListRequirements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequirementEndpointServer).ListRequirements(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequirementEndpoint_CreateRequirement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Requirement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequirementEndpointServer).CreateRequirement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leveler.RequirementEndpoint/CreateRequirement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequirementEndpointServer).CreateRequirement(ctx, req.(*Requirement))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequirementEndpoint_UpdateRequirement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Requirement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequirementEndpointServer).UpdateRequirement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leveler.RequirementEndpoint/UpdateRequirement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequirementEndpointServer).UpdateRequirement(ctx, req.(*Requirement))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequirementEndpoint_DeleteRequirement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequirementId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequirementEndpointServer).DeleteRequirement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leveler.RequirementEndpoint/DeleteRequirement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequirementEndpointServer).DeleteRequirement(ctx, req.(*RequirementId))
	}
	return interceptor(ctx, in, info, handler)
}

var _RequirementEndpoint_serviceDesc = grpc.ServiceDesc{
	ServiceName: "leveler.RequirementEndpoint",
	HandlerType: (*RequirementEndpointServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRequirement",
			Handler:    _RequirementEndpoint_GetRequirement_Handler,
		},
		{
			MethodName: "ListRequirements",
			Handler:    _RequirementEndpoint_ListRequirements_Handler,
		},
		{
			MethodName: "CreateRequirement",
			Handler:    _RequirementEndpoint_CreateRequirement_Handler,
		},
		{
			MethodName: "UpdateRequirement",
			Handler:    _RequirementEndpoint_UpdateRequirement_Handler,
		},
		{
			MethodName: "DeleteRequirement",
			Handler:    _RequirementEndpoint_DeleteRequirement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "requirement.proto",
}

func init() { proto.RegisterFile("requirement.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 412 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xcf, 0x6a, 0xdc, 0x30,
	0x10, 0xc6, 0x77, 0xbd, 0xd9, 0x2c, 0x1d, 0xb7, 0x89, 0xad, 0x84, 0x20, 0xdc, 0xcb, 0xe2, 0x12,
	0x48, 0x2f, 0x0a, 0xa4, 0x14, 0x4a, 0x0f, 0xa1, 0x26, 0x31, 0x21, 0x50, 0x0a, 0x35, 0xed, 0x03,
	0x38, 0xeb, 0x69, 0x10, 0xf5, 0x4a, 0xae, 0x24, 0x2f, 0xf8, 0x41, 0xfb, 0x06, 0x7d, 0x90, 0x62,
	0xf9, 0x4f, 0xd4, 0xe2, 0x3d, 0xe5, 0x26, 0xcf, 0xf7, 0x9b, 0x99, 0x6f, 0xc6, 0x0c, 0x84, 0x0a,
	0x7f, 0xd5, 0x5c, 0xe1, 0x16, 0x85, 0x61, 0x95, 0x92, 0x46, 0x92, 0x55, 0x89, 0x3b, 0x2c, 0x51,
	0x45, 0x2f, 0xf3, 0x8d, 0xe1, 0x52, 0x74, 0xe1, 0x28, 0xd8, 0x48, 0xa1, 0x8d, 0xca, 0xf9, 0x00,
	0x46, 0x50, 0x1b, 0x5e, 0xf6, 0xef, 0xd7, 0x8f, 0x52, 0x3e, 0x96, 0x78, 0x69, 0xbf, 0x1e, 0xea,
	0x1f, 0x97, 0xb8, 0xad, 0x4c, 0xd3, 0x89, 0xf1, 0x1b, 0x78, 0x95, 0x3d, 0xb5, 0xb9, 0x2f, 0x08,
	0x81, 0x83, 0x2f, 0xf9, 0x16, 0xe9, 0x7c, 0x3d, 0xbf, 0x78, 0x91, 0xd9, 0x77, 0xfc, 0xdb, 0x03,
	0xdf, 0xa1, 0xa6, 0x18, 0xb2, 0x06, 0xff, 0x16, 0xf5, 0x46, 0xf1, 0xaa, 0x35, 0x46, 0x3d, 0x2b,
	0xb9, 0x21, 0xf2, 0x16, 0x56, 0x89, 0x75, 0xad, 0xe9, 0x62, 0xbd, 0xb8, 0xf0, 0xaf, 0x8e, 0x59,
	0x3f, 0x0e, 0xeb, 0xe2, 0xd9, 0xa0, 0x93, 0x73, 0x58, 0x7e, 0x43, 0x6d, 0x34, 0x3d, 0x98, 0x06,
	0x3b, 0x95, 0xbc, 0x07, 0xff, 0x66, 0x9c, 0x5c, 0xd3, 0xa5, 0x85, 0x4f, 0x46, 0xf8, 0x49, 0xcb,
	0x5c, 0x8e, 0xdc, 0x81, 0x9f, 0x8a, 0x1d, 0x57, 0x52, 0xb4, 0xd3, 0xd0, 0x43, 0x9b, 0x76, 0x3e,
	0xa6, 0x39, 0x93, 0x32, 0x87, 0x4b, 0x85, 0x51, 0x4d, 0xe6, 0x66, 0x46, 0xd7, 0x10, 0xfc, 0x0f,
	0x90, 0x00, 0x16, 0x3f, 0xb1, 0xe9, 0x57, 0xd3, 0x3e, 0xc9, 0x29, 0x2c, 0x77, 0x79, 0x59, 0x63,
	0xbf, 0x93, 0xee, 0xe3, 0xa3, 0xf7, 0x61, 0x1e, 0x27, 0x70, 0xec, 0x34, 0xfb, 0xcc, 0xb5, 0x21,
	0x0c, 0x56, 0x19, 0xea, 0xba, 0x34, 0x9a, 0xce, 0xad, 0xaf, 0xd3, 0x29, 0x5f, 0xd9, 0x00, 0x5d,
	0xfd, 0xf1, 0xe0, 0xc4, 0x11, 0x52, 0x51, 0x54, 0x92, 0x0b, 0x43, 0x3e, 0xc1, 0xd1, 0x1d, 0x1a,
	0xf7, 0xa7, 0x9d, 0x4d, 0x15, 0xba, 0x2f, 0xa2, 0xc9, 0x06, 0xf1, 0x8c, 0x5c, 0x43, 0xd0, 0x3a,
	0x72, 0x82, 0x9a, 0x1c, 0x8d, 0xec, 0xd7, 0x1a, 0x55, 0x13, 0xd1, 0xa9, 0xdc, 0x36, 0x2b, 0x9e,
	0x91, 0x04, 0xc2, 0x1b, 0x85, 0xb9, 0x41, 0xd7, 0xc4, 0x64, 0xb3, 0xbd, 0x16, 0x12, 0x08, 0xbf,
	0x57, 0xc5, 0xb3, 0x4a, 0xa4, 0x10, 0xde, 0x62, 0x89, 0xff, 0x96, 0xd8, 0xb7, 0x8a, 0x33, 0xd6,
	0x9d, 0x0a, 0x1b, 0x4e, 0x85, 0xa5, 0xed, 0xa9, 0xc4, 0xb3, 0x87, 0x43, 0x1b, 0x79, 0xf7, 0x37,
	0x00, 0x00, 0xff, 0xff, 0x53, 0xff, 0x3d, 0xee, 0x94, 0x03, 0x00, 0x00,
}
