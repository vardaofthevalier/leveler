// Code generated by protoc-gen-go. DO NOT EDIT.
// source: host.proto

package leveler

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type HostId struct {
	Name string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
}

func (m *HostId) Reset()                    { *m = HostId{} }
func (m *HostId) String() string            { return proto.CompactTextString(m) }
func (*HostId) ProtoMessage()               {}
func (*HostId) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *HostId) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Host struct {
	Name         string         `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Description  string         `protobuf:"bytes,2,opt,name=Description" json:"Description,omitempty"`
	Constraints  []*Constraint  `protobuf:"bytes,3,rep,name=Constraints" json:"Constraints,omitempty"`
	Roles        []*Role        `protobuf:"bytes,4,rep,name=Roles" json:"Roles,omitempty"`
	Requirements []*Requirement `protobuf:"bytes,5,rep,name=Requirements" json:"Requirements,omitempty"`
}

func (m *Host) Reset()                    { *m = Host{} }
func (m *Host) String() string            { return proto.CompactTextString(m) }
func (*Host) ProtoMessage()               {}
func (*Host) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *Host) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Host) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Host) GetConstraints() []*Constraint {
	if m != nil {
		return m.Constraints
	}
	return nil
}

func (m *Host) GetRoles() []*Role {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *Host) GetRequirements() []*Requirement {
	if m != nil {
		return m.Requirements
	}
	return nil
}

type HostList struct {
	Results []*Host `protobuf:"bytes,1,rep,name=Results" json:"Results,omitempty"`
}

func (m *HostList) Reset()                    { *m = HostList{} }
func (m *HostList) String() string            { return proto.CompactTextString(m) }
func (*HostList) ProtoMessage()               {}
func (*HostList) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *HostList) GetResults() []*Host {
	if m != nil {
		return m.Results
	}
	return nil
}

func init() {
	proto.RegisterType((*HostId)(nil), "leveler.HostId")
	proto.RegisterType((*Host)(nil), "leveler.Host")
	proto.RegisterType((*HostList)(nil), "leveler.HostList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HostEndpoint service

type HostEndpointClient interface {
	GetHost(ctx context.Context, in *HostId, opts ...grpc.CallOption) (*Host, error)
	ListHosts(ctx context.Context, in *Query, opts ...grpc.CallOption) (*HostList, error)
	CreateHost(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Host, error)
	UpdateHost(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Host, error)
	DeleteHost(ctx context.Context, in *HostId, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type hostEndpointClient struct {
	cc *grpc.ClientConn
}

func NewHostEndpointClient(cc *grpc.ClientConn) HostEndpointClient {
	return &hostEndpointClient{cc}
}

func (c *hostEndpointClient) GetHost(ctx context.Context, in *HostId, opts ...grpc.CallOption) (*Host, error) {
	out := new(Host)
	err := grpc.Invoke(ctx, "/leveler.HostEndpoint/GetHost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostEndpointClient) ListHosts(ctx context.Context, in *Query, opts ...grpc.CallOption) (*HostList, error) {
	out := new(HostList)
	err := grpc.Invoke(ctx, "/leveler.HostEndpoint/ListHosts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostEndpointClient) CreateHost(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Host, error) {
	out := new(Host)
	err := grpc.Invoke(ctx, "/leveler.HostEndpoint/CreateHost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostEndpointClient) UpdateHost(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Host, error) {
	out := new(Host)
	err := grpc.Invoke(ctx, "/leveler.HostEndpoint/UpdateHost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostEndpointClient) DeleteHost(ctx context.Context, in *HostId, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/leveler.HostEndpoint/DeleteHost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HostEndpoint service

type HostEndpointServer interface {
	GetHost(context.Context, *HostId) (*Host, error)
	ListHosts(context.Context, *Query) (*HostList, error)
	CreateHost(context.Context, *Host) (*Host, error)
	UpdateHost(context.Context, *Host) (*Host, error)
	DeleteHost(context.Context, *HostId) (*google_protobuf.Empty, error)
}

func RegisterHostEndpointServer(s *grpc.Server, srv HostEndpointServer) {
	s.RegisterService(&_HostEndpoint_serviceDesc, srv)
}

func _HostEndpoint_GetHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostEndpointServer).GetHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leveler.HostEndpoint/GetHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostEndpointServer).GetHost(ctx, req.(*HostId))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostEndpoint_ListHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostEndpointServer).ListHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leveler.HostEndpoint/ListHosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostEndpointServer).ListHosts(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostEndpoint_CreateHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Host)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostEndpointServer).CreateHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leveler.HostEndpoint/CreateHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostEndpointServer).CreateHost(ctx, req.(*Host))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostEndpoint_UpdateHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Host)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostEndpointServer).UpdateHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leveler.HostEndpoint/UpdateHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostEndpointServer).UpdateHost(ctx, req.(*Host))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostEndpoint_DeleteHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostEndpointServer).DeleteHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leveler.HostEndpoint/DeleteHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostEndpointServer).DeleteHost(ctx, req.(*HostId))
	}
	return interceptor(ctx, in, info, handler)
}

var _HostEndpoint_serviceDesc = grpc.ServiceDesc{
	ServiceName: "leveler.HostEndpoint",
	HandlerType: (*HostEndpointServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHost",
			Handler:    _HostEndpoint_GetHost_Handler,
		},
		{
			MethodName: "ListHosts",
			Handler:    _HostEndpoint_ListHosts_Handler,
		},
		{
			MethodName: "CreateHost",
			Handler:    _HostEndpoint_CreateHost_Handler,
		},
		{
			MethodName: "UpdateHost",
			Handler:    _HostEndpoint_UpdateHost_Handler,
		},
		{
			MethodName: "DeleteHost",
			Handler:    _HostEndpoint_DeleteHost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "host.proto",
}

func init() { proto.RegisterFile("host.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x4d, 0x4f, 0x32, 0x31,
	0x10, 0x80, 0x59, 0x3e, 0x5f, 0x06, 0xde, 0x0f, 0xfa, 0x1a, 0xb3, 0x59, 0x3d, 0x90, 0xf5, 0x20,
	0x89, 0x64, 0x31, 0x10, 0xa3, 0x77, 0x20, 0x4a, 0x62, 0x4c, 0x6c, 0xe2, 0x0f, 0x00, 0x76, 0xc4,
	0x26, 0x65, 0xbb, 0xb6, 0x5d, 0x13, 0xae, 0xfe, 0x44, 0x7f, 0x91, 0x69, 0x59, 0x76, 0x59, 0xf1,
	0xe0, 0x6d, 0x3a, 0xcf, 0x33, 0x33, 0x6d, 0x33, 0x00, 0x2f, 0x42, 0xe9, 0x20, 0x96, 0x42, 0x0b,
	0xd2, 0xe0, 0xf8, 0x86, 0x1c, 0xa5, 0xd7, 0x91, 0xf8, 0x9a, 0x30, 0x89, 0x6b, 0x8c, 0x52, 0xe6,
	0xfd, 0x5b, 0x8a, 0x48, 0x69, 0x39, 0x67, 0x59, 0x06, 0xa4, 0xe0, 0xb8, 0x8b, 0x13, 0xcd, 0x78,
	0x1a, 0x9f, 0xac, 0x84, 0x58, 0x71, 0x1c, 0xd8, 0xd3, 0x22, 0x79, 0x1e, 0xe0, 0x3a, 0xd6, 0x9b,
	0x2d, 0xf4, 0x4f, 0xa1, 0x7e, 0x27, 0x94, 0x9e, 0x85, 0x84, 0x40, 0xf5, 0x61, 0xbe, 0x46, 0xd7,
	0xe9, 0x3a, 0xbd, 0x26, 0xb5, 0xb1, 0xff, 0xe1, 0x40, 0xd5, 0xe0, 0xef, 0x20, 0xe9, 0x42, 0x6b,
	0x82, 0x6a, 0x29, 0x59, 0xac, 0x99, 0x88, 0xdc, 0xb2, 0x45, 0xfb, 0x29, 0x72, 0x05, 0xad, 0x71,
	0x76, 0x4b, 0xe5, 0x56, 0xba, 0x95, 0x5e, 0x6b, 0xf8, 0x3f, 0x48, 0x5f, 0x15, 0xe4, 0x8c, 0xee,
	0x7b, 0xe4, 0x0c, 0x6a, 0x54, 0x70, 0x54, 0x6e, 0xd5, 0x16, 0xfc, 0xce, 0x0a, 0x4c, 0x96, 0x6e,
	0x19, 0xb9, 0x81, 0x36, 0xcd, 0x3f, 0x45, 0xb9, 0x35, 0xeb, 0x1e, 0xe5, 0x6e, 0x0e, 0x69, 0xc1,
	0xf4, 0x47, 0xf0, 0xcb, 0xbc, 0xe9, 0x9e, 0x29, 0x4d, 0xce, 0xa1, 0x41, 0x51, 0x25, 0x5c, 0x2b,
	0xd7, 0xf9, 0x32, 0xcc, 0x38, 0x74, 0x47, 0x87, 0xef, 0x65, 0x68, 0x9b, 0xcc, 0x34, 0x0a, 0x63,
	0xc1, 0x22, 0x4d, 0x2e, 0xa0, 0x71, 0x8b, 0xda, 0x7e, 0xce, 0xdf, 0x42, 0xcd, 0x2c, 0xf4, 0x8a,
	0x4d, 0xfc, 0x12, 0xb9, 0x84, 0xa6, 0x19, 0x67, 0x4e, 0x8a, 0xfc, 0xc9, 0xe8, 0x63, 0x82, 0x72,
	0xe3, 0x75, 0x0a, 0xb6, 0xf1, 0xfc, 0x12, 0xe9, 0x03, 0x8c, 0x25, 0xce, 0x35, 0xda, 0x09, 0xc5,
	0x86, 0x87, 0xfd, 0xfb, 0x00, 0x4f, 0x71, 0xf8, 0x53, 0xfb, 0x1a, 0x60, 0x82, 0x1c, 0x53, 0xfb,
	0xe0, 0xf6, 0xc7, 0xc1, 0x76, 0x61, 0x82, 0xdd, 0xc2, 0x04, 0x53, 0xb3, 0x30, 0x7e, 0x69, 0x51,
	0xb7, 0x99, 0xd1, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0xea, 0x18, 0x41, 0x31, 0xa4, 0x02, 0x00,
	0x00,
}
