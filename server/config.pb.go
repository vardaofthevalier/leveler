// Code generated by protoc-gen-go. DO NOT EDIT.
// source: config.proto

/*
Package server is a generated protocol buffer package.

It is generated from these files:
	config.proto
	pipeline.proto
	integration.proto
	data.proto
	user.proto
	resources.proto
	cmd.proto

It has these top-level messages:
	ContainerPlatform
	KubernetesOptions
	DockerOptions
	Database
	RedisOptions
	SqlOptions
	ServerConfig
	PipelineIntegrationConfig
	PipelineInputConfig
	PipelineOutputConfig
	JobConfig
	JobConfigList
	PipelineConfig
	PipelineConfigList
	Integration
	IntegrationsList
	BitbucketAccessConfig
	GithubAccessConfig
	AWSAccessConfig
	BuildEnvironmentConfig
	NexusAccessConfig
	SlackAccessConfig
	User
	UserCredentials
	Resource
	ResourceList
	Query
	ResourceCmdConfig
	FileSource
	OptionsSource
	CmdConfig
	SubCmdConfig
	Option
*/
package server

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ContainerPlatform struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Host string `protobuf:"bytes,2,opt,name=host" json:"host,omitempty"`
	Port int32  `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
	// Types that are valid to be assigned to Opts:
	//	*ContainerPlatform_KubernetesOptions
	//	*ContainerPlatform_DockerOptions
	Opts isContainerPlatform_Opts `protobuf_oneof:"opts"`
}

func (m *ContainerPlatform) Reset()                    { *m = ContainerPlatform{} }
func (m *ContainerPlatform) String() string            { return proto.CompactTextString(m) }
func (*ContainerPlatform) ProtoMessage()               {}
func (*ContainerPlatform) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isContainerPlatform_Opts interface {
	isContainerPlatform_Opts()
}

type ContainerPlatform_KubernetesOptions struct {
	KubernetesOptions *KubernetesOptions `protobuf:"bytes,4,opt,name=kubernetes_options,json=kubernetesOptions,oneof"`
}
type ContainerPlatform_DockerOptions struct {
	DockerOptions *DockerOptions `protobuf:"bytes,5,opt,name=docker_options,json=dockerOptions,oneof"`
}

func (*ContainerPlatform_KubernetesOptions) isContainerPlatform_Opts() {}
func (*ContainerPlatform_DockerOptions) isContainerPlatform_Opts()     {}

func (m *ContainerPlatform) GetOpts() isContainerPlatform_Opts {
	if m != nil {
		return m.Opts
	}
	return nil
}

func (m *ContainerPlatform) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ContainerPlatform) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *ContainerPlatform) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ContainerPlatform) GetKubernetesOptions() *KubernetesOptions {
	if x, ok := m.GetOpts().(*ContainerPlatform_KubernetesOptions); ok {
		return x.KubernetesOptions
	}
	return nil
}

func (m *ContainerPlatform) GetDockerOptions() *DockerOptions {
	if x, ok := m.GetOpts().(*ContainerPlatform_DockerOptions); ok {
		return x.DockerOptions
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ContainerPlatform) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ContainerPlatform_OneofMarshaler, _ContainerPlatform_OneofUnmarshaler, _ContainerPlatform_OneofSizer, []interface{}{
		(*ContainerPlatform_KubernetesOptions)(nil),
		(*ContainerPlatform_DockerOptions)(nil),
	}
}

func _ContainerPlatform_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ContainerPlatform)
	// opts
	switch x := m.Opts.(type) {
	case *ContainerPlatform_KubernetesOptions:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.KubernetesOptions); err != nil {
			return err
		}
	case *ContainerPlatform_DockerOptions:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DockerOptions); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ContainerPlatform.Opts has unexpected type %T", x)
	}
	return nil
}

func _ContainerPlatform_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ContainerPlatform)
	switch tag {
	case 4: // opts.kubernetes_options
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubernetesOptions)
		err := b.DecodeMessage(msg)
		m.Opts = &ContainerPlatform_KubernetesOptions{msg}
		return true, err
	case 5: // opts.docker_options
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DockerOptions)
		err := b.DecodeMessage(msg)
		m.Opts = &ContainerPlatform_DockerOptions{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ContainerPlatform_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ContainerPlatform)
	// opts
	switch x := m.Opts.(type) {
	case *ContainerPlatform_KubernetesOptions:
		s := proto.Size(x.KubernetesOptions)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ContainerPlatform_DockerOptions:
		s := proto.Size(x.DockerOptions)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type KubernetesOptions struct {
	JobNamespace string `protobuf:"bytes,1,opt,name=job_namespace,json=jobNamespace" json:"job_namespace,omitempty"`
}

func (m *KubernetesOptions) Reset()                    { *m = KubernetesOptions{} }
func (m *KubernetesOptions) String() string            { return proto.CompactTextString(m) }
func (*KubernetesOptions) ProtoMessage()               {}
func (*KubernetesOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *KubernetesOptions) GetJobNamespace() string {
	if m != nil {
		return m.JobNamespace
	}
	return ""
}

type DockerOptions struct {
	Stuff string `protobuf:"bytes,1,opt,name=stuff" json:"stuff,omitempty"`
}

func (m *DockerOptions) Reset()                    { *m = DockerOptions{} }
func (m *DockerOptions) String() string            { return proto.CompactTextString(m) }
func (*DockerOptions) ProtoMessage()               {}
func (*DockerOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DockerOptions) GetStuff() string {
	if m != nil {
		return m.Stuff
	}
	return ""
}

type Database struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Host string `protobuf:"bytes,2,opt,name=host" json:"host,omitempty"`
	Port int32  `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
	// Types that are valid to be assigned to Opts:
	//	*Database_RedisOptions
	//	*Database_SqlOptions
	Opts     isDatabase_Opts `protobuf_oneof:"opts"`
	Protocol string          `protobuf:"bytes,6,opt,name=protocol" json:"protocol,omitempty"`
}

func (m *Database) Reset()                    { *m = Database{} }
func (m *Database) String() string            { return proto.CompactTextString(m) }
func (*Database) ProtoMessage()               {}
func (*Database) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type isDatabase_Opts interface {
	isDatabase_Opts()
}

type Database_RedisOptions struct {
	RedisOptions *RedisOptions `protobuf:"bytes,4,opt,name=redis_options,json=redisOptions,oneof"`
}
type Database_SqlOptions struct {
	SqlOptions *SqlOptions `protobuf:"bytes,5,opt,name=sql_options,json=sqlOptions,oneof"`
}

func (*Database_RedisOptions) isDatabase_Opts() {}
func (*Database_SqlOptions) isDatabase_Opts()   {}

func (m *Database) GetOpts() isDatabase_Opts {
	if m != nil {
		return m.Opts
	}
	return nil
}

func (m *Database) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Database) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Database) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Database) GetRedisOptions() *RedisOptions {
	if x, ok := m.GetOpts().(*Database_RedisOptions); ok {
		return x.RedisOptions
	}
	return nil
}

func (m *Database) GetSqlOptions() *SqlOptions {
	if x, ok := m.GetOpts().(*Database_SqlOptions); ok {
		return x.SqlOptions
	}
	return nil
}

func (m *Database) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Database) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Database_OneofMarshaler, _Database_OneofUnmarshaler, _Database_OneofSizer, []interface{}{
		(*Database_RedisOptions)(nil),
		(*Database_SqlOptions)(nil),
	}
}

func _Database_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Database)
	// opts
	switch x := m.Opts.(type) {
	case *Database_RedisOptions:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RedisOptions); err != nil {
			return err
		}
	case *Database_SqlOptions:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SqlOptions); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Database.Opts has unexpected type %T", x)
	}
	return nil
}

func _Database_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Database)
	switch tag {
	case 4: // opts.redis_options
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RedisOptions)
		err := b.DecodeMessage(msg)
		m.Opts = &Database_RedisOptions{msg}
		return true, err
	case 5: // opts.sql_options
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SqlOptions)
		err := b.DecodeMessage(msg)
		m.Opts = &Database_SqlOptions{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Database_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Database)
	// opts
	switch x := m.Opts.(type) {
	case *Database_RedisOptions:
		s := proto.Size(x.RedisOptions)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Database_SqlOptions:
		s := proto.Size(x.SqlOptions)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type RedisOptions struct {
	PoolSize int32 `protobuf:"varint,1,opt,name=poolSize" json:"poolSize,omitempty"`
}

func (m *RedisOptions) Reset()                    { *m = RedisOptions{} }
func (m *RedisOptions) String() string            { return proto.CompactTextString(m) }
func (*RedisOptions) ProtoMessage()               {}
func (*RedisOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RedisOptions) GetPoolSize() int32 {
	if m != nil {
		return m.PoolSize
	}
	return 0
}

type SqlOptions struct {
	Driver   string `protobuf:"bytes,1,opt,name=driver" json:"driver,omitempty"`
	User     string `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	Database string `protobuf:"bytes,4,opt,name=database" json:"database,omitempty"`
}

func (m *SqlOptions) Reset()                    { *m = SqlOptions{} }
func (m *SqlOptions) String() string            { return proto.CompactTextString(m) }
func (*SqlOptions) ProtoMessage()               {}
func (*SqlOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SqlOptions) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *SqlOptions) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *SqlOptions) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *SqlOptions) GetDatabase() string {
	if m != nil {
		return m.Database
	}
	return ""
}

type ServerConfig struct {
	Host     string             `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Port     int32              `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
	Database *Database          `protobuf:"bytes,3,opt,name=database" json:"database,omitempty"`
	Platform *ContainerPlatform `protobuf:"bytes,4,opt,name=platform" json:"platform,omitempty"`
	Datadir  string             `protobuf:"bytes,5,opt,name=datadir" json:"datadir,omitempty"`
}

func (m *ServerConfig) Reset()                    { *m = ServerConfig{} }
func (m *ServerConfig) String() string            { return proto.CompactTextString(m) }
func (*ServerConfig) ProtoMessage()               {}
func (*ServerConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ServerConfig) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *ServerConfig) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ServerConfig) GetDatabase() *Database {
	if m != nil {
		return m.Database
	}
	return nil
}

func (m *ServerConfig) GetPlatform() *ContainerPlatform {
	if m != nil {
		return m.Platform
	}
	return nil
}

func (m *ServerConfig) GetDatadir() string {
	if m != nil {
		return m.Datadir
	}
	return ""
}

func init() {
	proto.RegisterType((*ContainerPlatform)(nil), "server.ContainerPlatform")
	proto.RegisterType((*KubernetesOptions)(nil), "server.KubernetesOptions")
	proto.RegisterType((*DockerOptions)(nil), "server.DockerOptions")
	proto.RegisterType((*Database)(nil), "server.Database")
	proto.RegisterType((*RedisOptions)(nil), "server.RedisOptions")
	proto.RegisterType((*SqlOptions)(nil), "server.SqlOptions")
	proto.RegisterType((*ServerConfig)(nil), "server.ServerConfig")
}

func init() { proto.RegisterFile("config.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 445 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0x86, 0xf1, 0x6e, 0x1b, 0xda, 0xd9, 0x14, 0x51, 0x6b, 0x41, 0x81, 0x53, 0x15, 0x84, 0x54,
	0x21, 0xd4, 0x03, 0x68, 0x25, 0x24, 0x24, 0x0e, 0xec, 0x1e, 0x10, 0x48, 0x80, 0xdc, 0x07, 0x58,
	0x39, 0x8d, 0x0b, 0xd9, 0x66, 0x33, 0x5e, 0xdb, 0x5d, 0x04, 0xef, 0xc5, 0xeb, 0x70, 0xe1, 0x45,
	0x90, 0x27, 0x89, 0x13, 0x52, 0x0e, 0xdc, 0xe6, 0x1f, 0x8f, 0x67, 0xf2, 0x7f, 0x19, 0x43, 0xbc,
	0xc1, 0x6a, 0x5b, 0x7c, 0x59, 0x69, 0x83, 0x0e, 0x79, 0x64, 0x95, 0xb9, 0x55, 0x26, 0xfd, 0xcd,
	0x60, 0x7e, 0x8e, 0x95, 0x93, 0x45, 0xa5, 0xcc, 0xe7, 0x52, 0xba, 0x2d, 0x9a, 0x6b, 0xce, 0x61,
	0x54, 0xc9, 0x6b, 0x95, 0xb0, 0x05, 0x5b, 0x4e, 0x05, 0xc5, 0x3e, 0xf7, 0x15, 0xad, 0x4b, 0x8e,
	0xea, 0x9c, 0x8f, 0x7d, 0x4e, 0xa3, 0x71, 0xc9, 0xf1, 0x82, 0x2d, 0xc7, 0x82, 0x62, 0xfe, 0x1e,
	0xf8, 0x6e, 0x9f, 0x29, 0x53, 0x29, 0xa7, 0xec, 0x25, 0x6a, 0x57, 0x60, 0x65, 0x93, 0xd1, 0x82,
	0x2d, 0x4f, 0x5e, 0x3c, 0x5a, 0xd5, 0x63, 0x57, 0x1f, 0x42, 0xc5, 0xa7, 0xba, 0xe0, 0xdd, 0x1d,
	0x31, 0xdf, 0x0d, 0x93, 0xfc, 0x0d, 0xdc, 0xcb, 0x71, 0xb3, 0x53, 0x26, 0xf4, 0x19, 0x53, 0x9f,
	0x07, 0x6d, 0x9f, 0x0b, 0x3a, 0xed, 0x7a, 0xcc, 0xf2, 0x7e, 0xe2, 0x6d, 0x04, 0x23, 0xd4, 0xce,
	0xa6, 0xaf, 0x60, 0x7e, 0x30, 0x91, 0x3f, 0x81, 0xd9, 0x15, 0x66, 0x97, 0xde, 0x9c, 0xd5, 0x72,
	0xd3, 0xba, 0x8d, 0xaf, 0x30, 0xfb, 0xd8, 0xe6, 0xd2, 0xa7, 0x30, 0xfb, 0x6b, 0x06, 0x3f, 0x85,
	0xb1, 0x75, 0xfb, 0xed, 0xb6, 0xa9, 0xae, 0x45, 0xfa, 0x8b, 0xc1, 0xe4, 0x42, 0x3a, 0x99, 0x49,
	0x4b, 0xa4, 0xdc, 0x77, 0x1d, 0xe8, 0xf9, 0xf8, 0xbf, 0xe9, 0xbd, 0x86, 0x99, 0x51, 0x79, 0x31,
	0x04, 0x77, 0xda, 0x1a, 0x16, 0xfe, 0xb0, 0xf3, 0x1b, 0x9b, 0x9e, 0xe6, 0x67, 0x70, 0x62, 0x6f,
	0xca, 0x01, 0x2b, 0xde, 0x5e, 0x5d, 0xdf, 0x94, 0xdd, 0x45, 0xb0, 0x41, 0xf1, 0xc7, 0x30, 0xa1,
	0xa5, 0xd8, 0x60, 0x99, 0x44, 0xf4, 0x7d, 0x41, 0x07, 0x82, 0xcf, 0x20, 0xee, 0x8f, 0xa6, 0x3b,
	0x88, 0xe5, 0xba, 0xf8, 0x51, 0xfb, 0x1c, 0x8b, 0xa0, 0x53, 0x0d, 0xd0, 0xcd, 0xe2, 0x0f, 0x21,
	0xca, 0x4d, 0x71, 0xab, 0x4c, 0xc3, 0xa3, 0x51, 0xde, 0xfd, 0xde, 0x2a, 0xd3, 0x12, 0xf1, 0x31,
	0x75, 0x95, 0xd6, 0x7e, 0x43, 0x93, 0x13, 0x15, 0xff, 0x25, 0x8d, 0xf6, 0x67, 0x79, 0x43, 0x98,
	0xa0, 0x4c, 0x45, 0xd0, 0xe9, 0x4f, 0x06, 0xf1, 0x9a, 0x5c, 0x9e, 0xd3, 0x92, 0x07, 0xdc, 0xec,
	0x1f, 0xb8, 0x8f, 0x7a, 0xb8, 0x9f, 0xf7, 0x9a, 0x1e, 0x13, 0xae, 0xfb, 0x61, 0xb5, 0x9a, 0x7c,
	0x37, 0x86, 0x9f, 0xc1, 0x44, 0x37, 0x4f, 0x64, 0xb8, 0xd0, 0x07, 0x6f, 0x48, 0x84, 0x52, 0x9e,
	0xc0, 0x5d, 0xdf, 0x22, 0x2f, 0x0c, 0xfd, 0x92, 0xa9, 0x68, 0x65, 0x16, 0x11, 0xe7, 0x97, 0x7f,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x23, 0x0a, 0x7c, 0xa5, 0x9c, 0x03, 0x00, 0x00,
}
