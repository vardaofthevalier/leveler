// Code generated by protoc-gen-go. DO NOT EDIT.
// source: config.proto

/*
Package leveler is a generated protocol buffer package.

It is generated from these files:
	config.proto
	cmd.proto
	resources.proto

It has these top-level messages:
	Database
	RedisOptions
	Config
	CmdCongig
	CmdOption
	Query
	ResourceId
	ResourceList
	ResourceResult
*/
package leveler

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Database struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Host string `protobuf:"bytes,2,opt,name=host" json:"host,omitempty"`
	Port int32  `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
	// Types that are valid to be assigned to Opts:
	//	*Database_Options
	Opts isDatabase_Opts `protobuf_oneof:"opts"`
}

func (m *Database) Reset()                    { *m = Database{} }
func (m *Database) String() string            { return proto.CompactTextString(m) }
func (*Database) ProtoMessage()               {}
func (*Database) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isDatabase_Opts interface {
	isDatabase_Opts()
}

type Database_Options struct {
	Options *RedisOptions `protobuf:"bytes,4,opt,name=options,oneof"`
}

func (*Database_Options) isDatabase_Opts() {}

func (m *Database) GetOpts() isDatabase_Opts {
	if m != nil {
		return m.Opts
	}
	return nil
}

func (m *Database) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Database) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Database) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Database) GetOptions() *RedisOptions {
	if x, ok := m.GetOpts().(*Database_Options); ok {
		return x.Options
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Database) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Database_OneofMarshaler, _Database_OneofUnmarshaler, _Database_OneofSizer, []interface{}{
		(*Database_Options)(nil),
	}
}

func _Database_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Database)
	// opts
	switch x := m.Opts.(type) {
	case *Database_Options:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Options); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Database.Opts has unexpected type %T", x)
	}
	return nil
}

func _Database_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Database)
	switch tag {
	case 4: // opts.options
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RedisOptions)
		err := b.DecodeMessage(msg)
		m.Opts = &Database_Options{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Database_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Database)
	// opts
	switch x := m.Opts.(type) {
	case *Database_Options:
		s := proto.Size(x.Options)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type RedisOptions struct {
	PoolSize int32 `protobuf:"varint,1,opt,name=poolSize" json:"poolSize,omitempty"`
}

func (m *RedisOptions) Reset()                    { *m = RedisOptions{} }
func (m *RedisOptions) String() string            { return proto.CompactTextString(m) }
func (*RedisOptions) ProtoMessage()               {}
func (*RedisOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RedisOptions) GetPoolSize() int32 {
	if m != nil {
		return m.PoolSize
	}
	return 0
}

type Config struct {
	Host     string    `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Port     int32     `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
	Database *Database `protobuf:"bytes,3,opt,name=database" json:"database,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Config) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Config) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Config) GetDatabase() *Database {
	if m != nil {
		return m.Database
	}
	return nil
}

func init() {
	proto.RegisterType((*Database)(nil), "leveler.Database")
	proto.RegisterType((*RedisOptions)(nil), "leveler.RedisOptions")
	proto.RegisterType((*Config)(nil), "leveler.Config")
}

func init() { proto.RegisterFile("config.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xce, 0xcf, 0x4b,
	0xcb, 0x4c, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xcf, 0x49, 0x2d, 0x4b, 0xcd, 0x49,
	0x2d, 0x52, 0x6a, 0x64, 0xe4, 0xe2, 0x70, 0x49, 0x2c, 0x49, 0x4c, 0x4a, 0x2c, 0x4e, 0x15, 0x12,
	0xe2, 0x62, 0x29, 0xa9, 0x2c, 0x48, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x41,
	0x62, 0x19, 0xf9, 0xc5, 0x25, 0x12, 0x4c, 0x10, 0x31, 0x10, 0x1b, 0x24, 0x56, 0x90, 0x5f, 0x54,
	0x22, 0xc1, 0xac, 0xc0, 0xa8, 0xc1, 0x1a, 0x04, 0x66, 0x0b, 0x19, 0x72, 0xb1, 0xe7, 0x17, 0x94,
	0x64, 0xe6, 0xe7, 0x15, 0x4b, 0xb0, 0x28, 0x30, 0x6a, 0x70, 0x1b, 0x89, 0xea, 0x41, 0xed, 0xd0,
	0x0b, 0x4a, 0x4d, 0xc9, 0x2c, 0xf6, 0x87, 0x48, 0x7a, 0x30, 0x04, 0xc1, 0xd4, 0x39, 0xb1, 0x71,
	0xb1, 0xe4, 0x17, 0x94, 0x14, 0x2b, 0x69, 0x71, 0xf1, 0x20, 0x2b, 0x11, 0x92, 0xe2, 0xe2, 0x28,
	0xc8, 0xcf, 0xcf, 0x09, 0xce, 0xac, 0x82, 0x38, 0x85, 0x35, 0x08, 0xce, 0x57, 0x8a, 0xe7, 0x62,
	0x73, 0x06, 0x7b, 0x04, 0xee, 0x30, 0x46, 0x2c, 0x0e, 0x63, 0x42, 0x72, 0x98, 0x2e, 0x17, 0x47,
	0x0a, 0xd4, 0x83, 0x60, 0x07, 0x73, 0x1b, 0x09, 0xc2, 0x5d, 0x06, 0xf3, 0x79, 0x10, 0x5c, 0x49,
	0x12, 0x1b, 0x38, 0x80, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xbf, 0x1a, 0xa7, 0x60, 0x30,
	0x01, 0x00, 0x00,
}
